name: Supervision

on:
  workflow_dispatch:
  schedule:
    # From GitHub's docs:
    #   The schedule event can be delayed during periods of high loads of GitHub
    #   Actions workflow runs. High load times include the start of every hour. If
    #   the load is sufficiently high enough, some queued jobs may be dropped. To
    #   decrease the chance of delay, schedule your workflow to run at a different
    #   time of the hour.
    - cron:  '7/10 * * * *'    # At every 10 minutes but avoid the rush at the start of the hour, instead start at 7

jobs:
  cucumber_supervision_slack:

    runs-on: ubuntu-latest

    steps:

      - name: Get prepare dates
        # must call always to avoid implicit call to success()
        # not really useful for first job but for symmetry
        id: prepare
        if: always()
        run: |
          echo "preparets=$(date +%s)" >> $GITHUB_OUTPUT
          nextwatchdogts=$((60*355 + $(date +%s)))
          echo "nextwatchdogts=$nextwatchdogts" >> $GITHUB_OUTPUT
          echo "nextwatchdogutc=$(date -d @$nextwatchdogts)" >> $GITHUB_OUTPUT

      - name: Create key
        id: createkey
        if: always()
        run: 'echo "$BASTION_KEY" > key; chmod 600 key'
        env:
          BASTION_KEY: ${{secrets.BASTION_KEY}}

      - name: List non running pods
        id: listnonrunningpods
        # must call always to avoid implicit call to success()
        if: always() && steps.createkey.outcome == 'success'
        run: |
          pods=$(ssh -o "StrictHostKeyChecking no" -i key ${{ secrets.BASTION_LOGIN }}@${{ secrets.BASTION_HOST }} kubectl get pods)
          nonrunningpods=$(echo "$pods" | grep -v Completed | grep "0/[0-9]*" | grep -v " [0-9]s$" | grep -v " [0-9][0-9]s$") || true
          echo "nonrunningpods=$nonrunningpods" >> $GITHUB_OUTPUT

      - name: Check non running pods
        id: checkpods
        # must call always to avoid implicit call to success()
        if: always() && steps.listnonrunningpods.outcome == 'success'
        run: |
          if [[ "${{steps.listnonrunningpods.outputs.nonrunningpods}}" != "" ]]; then
            echo "error, existing nonrunningpods: ${{steps.listnonrunningpods.outputs.nonrunningpods}}"
            exit 1
          fi

      - name: Delete key
        if: always()
        run: rm -f key

      - name: Set up JDK 11
        id: setupjdk
        # must call always to avoid implicit call to success()
        # useful to try as many steps as possible to see all errors
        if: always()
        with:
          java-version: 11
        uses: actions/setup-java@v1

      - name: Checkout sources
        id: checkout
        # must call always to avoid implicit call to success()
        # useful to try as many steps as possible to see all errors
        if: always()
        uses: actions/checkout@v1

      - name: Compile with Maven
        id: compile
        # must call always to avoid implicit call to success()
        if: always() && steps.checkout.outcome == 'success' && steps.setupjdk.outcome == 'success'
        run: mvn --batch-mode compile

      - name: Patch Cucumber properties
        id: cucumberproperties
        # must call always to avoid implicit call to success()
        if: always() && steps.compile.outcome == 'success'
        env:
          DEMO_BEARER: ${{ secrets.DEMO_BEARER }}
        run: |
          sed -i -e "s/bearer=.*/bearer=$DEMO_BEARER/" ./src/test/resources/demo_env.properties
          cat ./src/test/resources/demo_env.properties

      - name: Get cucumber start unix timestamp
        id: cucumberstart
        # must call always to avoid implicit call to success()
        if: always() && steps.prepare.outcome == 'success'
        run: |
          echo "cucumberstartts=$(date +%s)" >> $GITHUB_OUTPUT
          prepareduration=$(($(date +%s) - ${{steps.prepare.outputs.preparets}}))s
          echo "prepareduration=$prepareduration" >> $GITHUB_OUTPUT

      - name: Cucumber tests with Maven on demo platform
        id: demo_supervision
        # must call always to avoid implicit call to success()
        if: always() && steps.cucumberproperties.outcome == 'success'
        run: mvn --batch-mode test -Dcucumber.filter.tags=@tagSupervision -Dusing_platform=demo

      - name: Get cucumber end dates
        id: cucumberend
        # must call always to avoid implicit call to success()
        if: always() && steps.cucumberstart.outcome == 'success'
        run: |
          echo "cucumberenddateutc=$(date)" >> $GITHUB_OUTPUT
          cucumberduration=$(($(date +%s) - ${{steps.cucumberstart.outputs.cucumberstartts}}))s
          echo "cucumberduration=$cucumberduration" >> $GITHUB_OUTPUT

      - name: Failure action Slack Notification
        # must call always to avoid implicit call to success()
        if: always() && (steps.demo_supervision.outcome == 'failure' || steps.checkpods.outcome == 'failure')
        env:
          SLACK_WEBHOOK: ${{ secrets.SUPERVISION_CHANNEL_SLACK_WEBHOOK }}
          SLACK_MESSAGE: 'Cucumber Supervision Failure on demo platform (https://demo.gridsuite.org/gridexplore) :bell:'
        uses: rtCamp/action-slack-notify@v2.2.0

      - name: list watchdog messages
        id: listwatchdog
        if: always()
        with:
          method: chat.scheduledMessages.list
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
        uses: slackapi/slack-github-action@v2.0.0

      - name: parse response of watchdog message list
        id: parsewatchdogresponse
        # must call always to avoid implicit call to success()
        if: always() && steps.listwatchdog.outcome == 'success'
        # assume we have only one message, to revisit if needed
        # could filter on the text of the message (response is this:
        # {
        #   "ok": true,
        #   "scheduled_messages": [
        #     {
        #       "id": "***",
        #       "channel_id": "***",
        #       "post_at": 1732699736,
        #       "date_created": 1732698837,
        #       "text": "Github Watchdog triggered, monitoring inactive since 355 minutes, please reenable github workflow or check for other errors."
        #     },
        #     {
        #       "id": "Q083BU4QW8G",
        #       "channel_id": "***",
        #       "post_at": 1732699698,
        #       "date_created": 1732698799,
        #       "text": "Github Watchdog triggered, monitoring inactive since 355 minutes, please reenable github workflow or check for other errors."
        #     }
        #   ],
        #   "response_metadata": {
        #     "next_cursor": "",
        #     "scopes": [
        #       "chat:write",
        #       "pins:read",
        #       "pins:write"
        #     ]
        #   }
        # }
        #)
        run: |
          echo "watchdogid=${{ fromJson(steps.listwatchdog.outputs.response).scheduled_messages[0].id }}" >> $GITHUB_OUTPUT

      - name: reschedule watchdog message in 355 minutes
        id: nextwatchdog
        # almost always schedule the watchdog (unless we don't know when to schedule, should never happen)
        # this way we know if the next action doesn't execute because it would cancel the watchdog
        # if we don't schedule the watchdog, visiting the github actions page will show errors, and maybe
        # even the pinned message will show that the watchdog was not scheduled
        # must call always to avoid implicit call to success()
        if: always() && steps.prepare.outcome == 'success'
        with:
          method: chat.scheduleMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            post_at: ${{ steps.prepare.outputs.nextwatchdogts }}
            text: "Github Supervision Watchdog triggered, monitoring inactive or encountering unforseen error since at least 355 minutes, please reenable github workflow or check for other errors: https://github.com/gridsuite/gridsuite-integration-test/actions/"
        uses: slackapi/slack-github-action@v2.0.0

      - name: Update the pinned message with status
        # must call always to avoid implicit call to success()
        if: always()
        with:
          method: chat.update
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            ts: "${{ secrets.PINNED_TS }}"
            text: "date=${{ steps.cucumberend.outputs.cucumberenddateutc }} was cucumberoutcome=${{steps.demo_supervision.outcome}}, podsoutcome=${{steps.checkpods.outcome}} (prepareduration=${{ steps.cucumberstart.outputs.prepareduration }}, cucumberduration=${{ steps.cucumberend.outputs.cucumberduration }}, nextwatchdog=${{steps.nextwatchdog.outcome}}@${{steps.prepare.outputs.nextwatchdogutc}})"
        uses: slackapi/slack-github-action@v2.0.0

      - name: delete previous watchdog message
        # only delete current watchdog if everything was OK (only check steps like demo_supervision and checkpods have failures that are OK
        # (a failure for these steps means the deployment is failing, not the step)). this way the watchdog will trigger and someone will come looking at the source here
        # if we don't delete because of minor errors (e.g. updating the pinned message), watchdogs message will not all be cleared
        # so one watchdog alert will be shown per errored run, even if the next runs work perfectly again (up to 35 since we schedule the watchdog for 355 minutes)
        # if this happens to often we can change this code to clear all watchdog messages instead of one
        if: (success() || steps.demo_supervision.outcome == 'failure' || steps.checkpods.outcome == 'failure') && steps.parsewatchdogresponse.outcome == 'success' && steps.parsewatchdogresponse.outputs.watchdogid != ''
        with:
          method: chat.deleteScheduledMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            scheduled_message_id: ${{ steps.parsewatchdogresponse.outputs.watchdogid }}
        uses: slackapi/slack-github-action@v2.0.0
